// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInsurances(t *testing.T) {
	t.Parallel()

	query := Insurances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInsurancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInsurancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Insurances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInsurancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InsuranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInsurancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InsuranceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Insurance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InsuranceExists to return true, but got false.")
	}
}

func testInsurancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	insuranceFound, err := FindInsurance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if insuranceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInsurancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Insurances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInsurancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Insurances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInsurancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	insuranceOne := &Insurance{}
	insuranceTwo := &Insurance{}
	if err = randomize.Struct(seed, insuranceOne, insuranceDBTypes, false, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}
	if err = randomize.Struct(seed, insuranceTwo, insuranceDBTypes, false, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = insuranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = insuranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Insurances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInsurancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	insuranceOne := &Insurance{}
	insuranceTwo := &Insurance{}
	if err = randomize.Struct(seed, insuranceOne, insuranceDBTypes, false, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}
	if err = randomize.Struct(seed, insuranceTwo, insuranceDBTypes, false, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = insuranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = insuranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func insuranceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func insuranceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Insurance) error {
	*o = Insurance{}
	return nil
}

func testInsurancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Insurance{}
	o := &Insurance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, insuranceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Insurance object: %s", err)
	}

	AddInsuranceHook(boil.BeforeInsertHook, insuranceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	insuranceBeforeInsertHooks = []InsuranceHook{}

	AddInsuranceHook(boil.AfterInsertHook, insuranceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	insuranceAfterInsertHooks = []InsuranceHook{}

	AddInsuranceHook(boil.AfterSelectHook, insuranceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	insuranceAfterSelectHooks = []InsuranceHook{}

	AddInsuranceHook(boil.BeforeUpdateHook, insuranceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	insuranceBeforeUpdateHooks = []InsuranceHook{}

	AddInsuranceHook(boil.AfterUpdateHook, insuranceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	insuranceAfterUpdateHooks = []InsuranceHook{}

	AddInsuranceHook(boil.BeforeDeleteHook, insuranceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	insuranceBeforeDeleteHooks = []InsuranceHook{}

	AddInsuranceHook(boil.AfterDeleteHook, insuranceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	insuranceAfterDeleteHooks = []InsuranceHook{}

	AddInsuranceHook(boil.BeforeUpsertHook, insuranceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	insuranceBeforeUpsertHooks = []InsuranceHook{}

	AddInsuranceHook(boil.AfterUpsertHook, insuranceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	insuranceAfterUpsertHooks = []InsuranceHook{}
}

func testInsurancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInsurancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(insuranceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInsuranceToManyUseridDoctors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"insurancesondoctor\" (\"insuranceid\", \"userid\") values ($1, $2)", a.ID, b.Userid)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"insurancesondoctor\" (\"insuranceid\", \"userid\") values ($1, $2)", a.ID, c.Userid)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.UseridDoctors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Userid == b.Userid {
			bFound = true
		}
		if v.Userid == c.Userid {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InsuranceSlice{&a}
	if err = a.L.LoadUseridDoctors(ctx, tx, false, (*[]*Insurance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UseridDoctors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UseridDoctors = nil
	if err = a.L.LoadUseridDoctors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UseridDoctors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInsuranceToManyUseridPatients(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c Patient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, patientDBTypes, false, patientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, patientDBTypes, false, patientColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"insurancesonpatient\" (\"insuranceid\", \"userid\") values ($1, $2)", a.ID, b.Userid)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"insurancesonpatient\" (\"insuranceid\", \"userid\") values ($1, $2)", a.ID, c.Userid)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.UseridPatients().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Userid == b.Userid {
			bFound = true
		}
		if v.Userid == c.Userid {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InsuranceSlice{&a}
	if err = a.L.LoadUseridPatients(ctx, tx, false, (*[]*Insurance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UseridPatients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UseridPatients = nil
	if err = a.L.LoadUseridPatients(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UseridPatients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInsuranceToManyUseridGenericusers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c Genericuser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, genericuserDBTypes, false, genericuserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, genericuserDBTypes, false, genericuserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"insurancesonuser\" (\"insuranceid\", \"userid\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"insurancesonuser\" (\"insuranceid\", \"userid\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.UseridGenericusers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InsuranceSlice{&a}
	if err = a.L.LoadUseridGenericusers(ctx, tx, false, (*[]*Insurance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UseridGenericusers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UseridGenericusers = nil
	if err = a.L.LoadUseridGenericusers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UseridGenericusers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInsuranceToManyAddOpUseridDoctors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Doctor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Doctor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUseridDoctors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.InsuranceidInsurances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.InsuranceidInsurances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.UseridDoctors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UseridDoctors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UseridDoctors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInsuranceToManySetOpUseridDoctors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Doctor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUseridDoctors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UseridDoctors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUseridDoctors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UseridDoctors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.InsuranceidInsurances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.InsuranceidInsurances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.UseridDoctors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UseridDoctors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInsuranceToManyRemoveOpUseridDoctors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Doctor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUseridDoctors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UseridDoctors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUseridDoctors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UseridDoctors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.InsuranceidInsurances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.InsuranceidInsurances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.UseridDoctors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UseridDoctors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UseridDoctors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInsuranceToManyAddOpUseridPatients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Patient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Patient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, patientDBTypes, false, strmangle.SetComplement(patientPrimaryKeyColumns, patientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Patient{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUseridPatients(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.InsuranceidInsurances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.InsuranceidInsurances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.UseridPatients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UseridPatients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UseridPatients().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInsuranceToManySetOpUseridPatients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Patient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Patient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, patientDBTypes, false, strmangle.SetComplement(patientPrimaryKeyColumns, patientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUseridPatients(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UseridPatients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUseridPatients(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UseridPatients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.InsuranceidInsurances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.InsuranceidInsurances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.UseridPatients[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UseridPatients[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInsuranceToManyRemoveOpUseridPatients(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Patient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Patient{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, patientDBTypes, false, strmangle.SetComplement(patientPrimaryKeyColumns, patientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUseridPatients(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UseridPatients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUseridPatients(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UseridPatients().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.InsuranceidInsurances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.InsuranceidInsurances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.UseridPatients) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UseridPatients[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UseridPatients[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInsuranceToManyAddOpUseridGenericusers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Genericuser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genericuser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Genericuser{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUseridGenericusers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.InsuranceidInsurances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.InsuranceidInsurances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.UseridGenericusers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UseridGenericusers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UseridGenericusers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInsuranceToManySetOpUseridGenericusers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Genericuser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genericuser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUseridGenericusers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UseridGenericusers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUseridGenericusers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UseridGenericusers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.InsuranceidInsurances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.InsuranceidInsurances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.UseridGenericusers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UseridGenericusers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInsuranceToManyRemoveOpUseridGenericusers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Insurance
	var b, c, d, e Genericuser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genericuser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUseridGenericusers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UseridGenericusers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUseridGenericusers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UseridGenericusers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.InsuranceidInsurances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.InsuranceidInsurances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.InsuranceidInsurances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.UseridGenericusers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UseridGenericusers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UseridGenericusers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInsurancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInsurancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InsuranceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInsurancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Insurances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	insuranceDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`}
	_                = bytes.MinRead
)

func testInsurancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(insurancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(insuranceAllColumns) == len(insurancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insurancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInsurancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(insuranceAllColumns) == len(insurancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Insurance{}
	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insuranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, insuranceDBTypes, true, insurancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(insuranceAllColumns, insurancePrimaryKeyColumns) {
		fields = insuranceAllColumns
	} else {
		fields = strmangle.SetComplement(
			insuranceAllColumns,
			insurancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InsuranceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInsurancesUpsert(t *testing.T) {
	t.Parallel()

	if len(insuranceAllColumns) == len(insurancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Insurance{}
	if err = randomize.Struct(seed, &o, insuranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Insurance: %s", err)
	}

	count, err := Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, insuranceDBTypes, false, insurancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Insurance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Insurance: %s", err)
	}

	count, err = Insurances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
