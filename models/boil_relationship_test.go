// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DoctorToGenericuserUsingUseridGenericuser", testDoctorToOneGenericuserUsingUseridGenericuser)
	t.Run("PatientToGenericuserUsingUseridGenericuser", testPatientToOneGenericuserUsingUseridGenericuser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("GenericuserToDoctorUsingUseridDoctor", testGenericuserOneToOneDoctorUsingUseridDoctor)
	t.Run("GenericuserToPatientUsingUseridPatient", testGenericuserOneToOnePatientUsingUseridPatient)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DoctorToInsuranceidInsurances", testDoctorToManyInsuranceidInsurances)
	t.Run("DoctorToSpecialtyidSpecialties", testDoctorToManySpecialtyidSpecialties)
	t.Run("GenericuserToInsuranceidInsurances", testGenericuserToManyInsuranceidInsurances)
	t.Run("GenericuserToRoleidRoles", testGenericuserToManyRoleidRoles)
	t.Run("InsuranceToUseridDoctors", testInsuranceToManyUseridDoctors)
	t.Run("InsuranceToUseridPatients", testInsuranceToManyUseridPatients)
	t.Run("InsuranceToUseridGenericusers", testInsuranceToManyUseridGenericusers)
	t.Run("PatientToInsuranceidInsurances", testPatientToManyInsuranceidInsurances)
	t.Run("RoleToUseridGenericusers", testRoleToManyUseridGenericusers)
	t.Run("SpecialtyToUseridDoctors", testSpecialtyToManyUseridDoctors)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DoctorToGenericuserUsingUseridDoctor", testDoctorToOneSetOpGenericuserUsingUseridGenericuser)
	t.Run("PatientToGenericuserUsingUseridPatient", testPatientToOneSetOpGenericuserUsingUseridGenericuser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("GenericuserToDoctorUsingUseridDoctor", testGenericuserOneToOneSetOpDoctorUsingUseridDoctor)
	t.Run("GenericuserToPatientUsingUseridPatient", testGenericuserOneToOneSetOpPatientUsingUseridPatient)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DoctorToInsuranceidInsurances", testDoctorToManyAddOpInsuranceidInsurances)
	t.Run("DoctorToSpecialtyidSpecialties", testDoctorToManyAddOpSpecialtyidSpecialties)
	t.Run("GenericuserToInsuranceidInsurances", testGenericuserToManyAddOpInsuranceidInsurances)
	t.Run("GenericuserToRoleidRoles", testGenericuserToManyAddOpRoleidRoles)
	t.Run("InsuranceToUseridDoctors", testInsuranceToManyAddOpUseridDoctors)
	t.Run("InsuranceToUseridPatients", testInsuranceToManyAddOpUseridPatients)
	t.Run("InsuranceToUseridGenericusers", testInsuranceToManyAddOpUseridGenericusers)
	t.Run("PatientToInsuranceidInsurances", testPatientToManyAddOpInsuranceidInsurances)
	t.Run("RoleToUseridGenericusers", testRoleToManyAddOpUseridGenericusers)
	t.Run("SpecialtyToUseridDoctors", testSpecialtyToManyAddOpUseridDoctors)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DoctorToInsuranceidInsurances", testDoctorToManySetOpInsuranceidInsurances)
	t.Run("DoctorToSpecialtyidSpecialties", testDoctorToManySetOpSpecialtyidSpecialties)
	t.Run("GenericuserToInsuranceidInsurances", testGenericuserToManySetOpInsuranceidInsurances)
	t.Run("GenericuserToRoleidRoles", testGenericuserToManySetOpRoleidRoles)
	t.Run("InsuranceToUseridDoctors", testInsuranceToManySetOpUseridDoctors)
	t.Run("InsuranceToUseridPatients", testInsuranceToManySetOpUseridPatients)
	t.Run("InsuranceToUseridGenericusers", testInsuranceToManySetOpUseridGenericusers)
	t.Run("PatientToInsuranceidInsurances", testPatientToManySetOpInsuranceidInsurances)
	t.Run("RoleToUseridGenericusers", testRoleToManySetOpUseridGenericusers)
	t.Run("SpecialtyToUseridDoctors", testSpecialtyToManySetOpUseridDoctors)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DoctorToInsuranceidInsurances", testDoctorToManyRemoveOpInsuranceidInsurances)
	t.Run("DoctorToSpecialtyidSpecialties", testDoctorToManyRemoveOpSpecialtyidSpecialties)
	t.Run("GenericuserToInsuranceidInsurances", testGenericuserToManyRemoveOpInsuranceidInsurances)
	t.Run("GenericuserToRoleidRoles", testGenericuserToManyRemoveOpRoleidRoles)
	t.Run("InsuranceToUseridDoctors", testInsuranceToManyRemoveOpUseridDoctors)
	t.Run("InsuranceToUseridPatients", testInsuranceToManyRemoveOpUseridPatients)
	t.Run("InsuranceToUseridGenericusers", testInsuranceToManyRemoveOpUseridGenericusers)
	t.Run("PatientToInsuranceidInsurances", testPatientToManyRemoveOpInsuranceidInsurances)
	t.Run("RoleToUseridGenericusers", testRoleToManyRemoveOpUseridGenericusers)
	t.Run("SpecialtyToUseridDoctors", testSpecialtyToManyRemoveOpUseridDoctors)
}
