// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Insurance is an object representing the database table.
type Insurance struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *insuranceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L insuranceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InsuranceColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var InsuranceTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "insurances.id",
	Name: "insurances.name",
}

// Generated where

var InsuranceWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"insurances\".\"id\""},
	Name: whereHelperstring{field: "\"insurances\".\"name\""},
}

// InsuranceRels is where relationship names are stored.
var InsuranceRels = struct {
	UseridDoctors      string
	UseridPatients     string
	UseridGenericusers string
}{
	UseridDoctors:      "UseridDoctors",
	UseridPatients:     "UseridPatients",
	UseridGenericusers: "UseridGenericusers",
}

// insuranceR is where relationships are stored.
type insuranceR struct {
	UseridDoctors      DoctorSlice      `boil:"UseridDoctors" json:"UseridDoctors" toml:"UseridDoctors" yaml:"UseridDoctors"`
	UseridPatients     PatientSlice     `boil:"UseridPatients" json:"UseridPatients" toml:"UseridPatients" yaml:"UseridPatients"`
	UseridGenericusers GenericuserSlice `boil:"UseridGenericusers" json:"UseridGenericusers" toml:"UseridGenericusers" yaml:"UseridGenericusers"`
}

// NewStruct creates a new relationship struct
func (*insuranceR) NewStruct() *insuranceR {
	return &insuranceR{}
}

func (r *insuranceR) GetUseridDoctors() DoctorSlice {
	if r == nil {
		return nil
	}
	return r.UseridDoctors
}

func (r *insuranceR) GetUseridPatients() PatientSlice {
	if r == nil {
		return nil
	}
	return r.UseridPatients
}

func (r *insuranceR) GetUseridGenericusers() GenericuserSlice {
	if r == nil {
		return nil
	}
	return r.UseridGenericusers
}

// insuranceL is where Load methods for each relationship are stored.
type insuranceL struct{}

var (
	insuranceAllColumns            = []string{"id", "name"}
	insuranceColumnsWithoutDefault = []string{"name"}
	insuranceColumnsWithDefault    = []string{"id"}
	insurancePrimaryKeyColumns     = []string{"id"}
	insuranceGeneratedColumns      = []string{}
)

type (
	// InsuranceSlice is an alias for a slice of pointers to Insurance.
	// This should almost always be used instead of []Insurance.
	InsuranceSlice []*Insurance
	// InsuranceHook is the signature for custom Insurance hook methods
	InsuranceHook func(context.Context, boil.ContextExecutor, *Insurance) error

	insuranceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	insuranceType                 = reflect.TypeOf(&Insurance{})
	insuranceMapping              = queries.MakeStructMapping(insuranceType)
	insurancePrimaryKeyMapping, _ = queries.BindMapping(insuranceType, insuranceMapping, insurancePrimaryKeyColumns)
	insuranceInsertCacheMut       sync.RWMutex
	insuranceInsertCache          = make(map[string]insertCache)
	insuranceUpdateCacheMut       sync.RWMutex
	insuranceUpdateCache          = make(map[string]updateCache)
	insuranceUpsertCacheMut       sync.RWMutex
	insuranceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var insuranceAfterSelectMu sync.Mutex
var insuranceAfterSelectHooks []InsuranceHook

var insuranceBeforeInsertMu sync.Mutex
var insuranceBeforeInsertHooks []InsuranceHook
var insuranceAfterInsertMu sync.Mutex
var insuranceAfterInsertHooks []InsuranceHook

var insuranceBeforeUpdateMu sync.Mutex
var insuranceBeforeUpdateHooks []InsuranceHook
var insuranceAfterUpdateMu sync.Mutex
var insuranceAfterUpdateHooks []InsuranceHook

var insuranceBeforeDeleteMu sync.Mutex
var insuranceBeforeDeleteHooks []InsuranceHook
var insuranceAfterDeleteMu sync.Mutex
var insuranceAfterDeleteHooks []InsuranceHook

var insuranceBeforeUpsertMu sync.Mutex
var insuranceBeforeUpsertHooks []InsuranceHook
var insuranceAfterUpsertMu sync.Mutex
var insuranceAfterUpsertHooks []InsuranceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Insurance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Insurance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Insurance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Insurance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Insurance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Insurance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Insurance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Insurance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Insurance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range insuranceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInsuranceHook registers your hook function for all future operations.
func AddInsuranceHook(hookPoint boil.HookPoint, insuranceHook InsuranceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		insuranceAfterSelectMu.Lock()
		insuranceAfterSelectHooks = append(insuranceAfterSelectHooks, insuranceHook)
		insuranceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		insuranceBeforeInsertMu.Lock()
		insuranceBeforeInsertHooks = append(insuranceBeforeInsertHooks, insuranceHook)
		insuranceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		insuranceAfterInsertMu.Lock()
		insuranceAfterInsertHooks = append(insuranceAfterInsertHooks, insuranceHook)
		insuranceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		insuranceBeforeUpdateMu.Lock()
		insuranceBeforeUpdateHooks = append(insuranceBeforeUpdateHooks, insuranceHook)
		insuranceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		insuranceAfterUpdateMu.Lock()
		insuranceAfterUpdateHooks = append(insuranceAfterUpdateHooks, insuranceHook)
		insuranceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		insuranceBeforeDeleteMu.Lock()
		insuranceBeforeDeleteHooks = append(insuranceBeforeDeleteHooks, insuranceHook)
		insuranceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		insuranceAfterDeleteMu.Lock()
		insuranceAfterDeleteHooks = append(insuranceAfterDeleteHooks, insuranceHook)
		insuranceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		insuranceBeforeUpsertMu.Lock()
		insuranceBeforeUpsertHooks = append(insuranceBeforeUpsertHooks, insuranceHook)
		insuranceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		insuranceAfterUpsertMu.Lock()
		insuranceAfterUpsertHooks = append(insuranceAfterUpsertHooks, insuranceHook)
		insuranceAfterUpsertMu.Unlock()
	}
}

// One returns a single insurance record from the query.
func (q insuranceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Insurance, error) {
	o := &Insurance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for insurances")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Insurance records from the query.
func (q insuranceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InsuranceSlice, error) {
	var o []*Insurance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Insurance slice")
	}

	if len(insuranceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Insurance records in the query.
func (q insuranceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count insurances rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q insuranceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if insurances exists")
	}

	return count > 0, nil
}

// UseridDoctors retrieves all the doctor's Doctors with an executor via userid column.
func (o *Insurance) UseridDoctors(mods ...qm.QueryMod) doctorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"insurancesondoctor\" on \"doctor\".\"userid\" = \"insurancesondoctor\".\"userid\""),
		qm.Where("\"insurancesondoctor\".\"insuranceid\"=?", o.ID),
	)

	return Doctors(queryMods...)
}

// UseridPatients retrieves all the patient's Patients with an executor via userid column.
func (o *Insurance) UseridPatients(mods ...qm.QueryMod) patientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"insurancesonpatient\" on \"patient\".\"userid\" = \"insurancesonpatient\".\"userid\""),
		qm.Where("\"insurancesonpatient\".\"insuranceid\"=?", o.ID),
	)

	return Patients(queryMods...)
}

// UseridGenericusers retrieves all the genericuser's Genericusers with an executor via id column.
func (o *Insurance) UseridGenericusers(mods ...qm.QueryMod) genericuserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"insurancesonuser\" on \"genericuser\".\"id\" = \"insurancesonuser\".\"userid\""),
		qm.Where("\"insurancesonuser\".\"insuranceid\"=?", o.ID),
	)

	return Genericusers(queryMods...)
}

// LoadUseridDoctors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (insuranceL) LoadUseridDoctors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInsurance interface{}, mods queries.Applicator) error {
	var slice []*Insurance
	var object *Insurance

	if singular {
		var ok bool
		object, ok = maybeInsurance.(*Insurance)
		if !ok {
			object = new(Insurance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInsurance))
			}
		}
	} else {
		s, ok := maybeInsurance.(*[]*Insurance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInsurance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &insuranceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &insuranceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"doctor\".\"userid\", \"a\".\"insuranceid\""),
		qm.From("\"doctor\""),
		qm.InnerJoin("\"insurancesondoctor\" as \"a\" on \"doctor\".\"userid\" = \"a\".\"userid\""),
		qm.WhereIn("\"a\".\"insuranceid\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load doctor")
	}

	var resultSlice []*Doctor

	var localJoinCols []int
	for results.Next() {
		one := new(Doctor)
		var localJoinCol int

		err = results.Scan(&one.Userid, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for doctor")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice doctor")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on doctor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doctor")
	}

	if len(doctorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UseridDoctors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &doctorR{}
			}
			foreign.R.InsuranceidInsurances = append(foreign.R.InsuranceidInsurances, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UseridDoctors = append(local.R.UseridDoctors, foreign)
				if foreign.R == nil {
					foreign.R = &doctorR{}
				}
				foreign.R.InsuranceidInsurances = append(foreign.R.InsuranceidInsurances, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridPatients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (insuranceL) LoadUseridPatients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInsurance interface{}, mods queries.Applicator) error {
	var slice []*Insurance
	var object *Insurance

	if singular {
		var ok bool
		object, ok = maybeInsurance.(*Insurance)
		if !ok {
			object = new(Insurance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInsurance))
			}
		}
	} else {
		s, ok := maybeInsurance.(*[]*Insurance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInsurance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &insuranceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &insuranceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"patient\".\"userid\", \"a\".\"insuranceid\""),
		qm.From("\"patient\""),
		qm.InnerJoin("\"insurancesonpatient\" as \"a\" on \"patient\".\"userid\" = \"a\".\"userid\""),
		qm.WhereIn("\"a\".\"insuranceid\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load patient")
	}

	var resultSlice []*Patient

	var localJoinCols []int
	for results.Next() {
		one := new(Patient)
		var localJoinCol int

		err = results.Scan(&one.Userid, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for patient")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice patient")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on patient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for patient")
	}

	if len(patientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UseridPatients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &patientR{}
			}
			foreign.R.InsuranceidInsurances = append(foreign.R.InsuranceidInsurances, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UseridPatients = append(local.R.UseridPatients, foreign)
				if foreign.R == nil {
					foreign.R = &patientR{}
				}
				foreign.R.InsuranceidInsurances = append(foreign.R.InsuranceidInsurances, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridGenericusers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (insuranceL) LoadUseridGenericusers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInsurance interface{}, mods queries.Applicator) error {
	var slice []*Insurance
	var object *Insurance

	if singular {
		var ok bool
		object, ok = maybeInsurance.(*Insurance)
		if !ok {
			object = new(Insurance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInsurance))
			}
		}
	} else {
		s, ok := maybeInsurance.(*[]*Insurance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInsurance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &insuranceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &insuranceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"genericuser\".\"id\", \"genericuser\".\"name\", \"genericuser\".\"email\", \"genericuser\".\"age\", \"genericuser\".\"gender\", \"genericuser\".\"passwordhash\", \"a\".\"insuranceid\""),
		qm.From("\"genericuser\""),
		qm.InnerJoin("\"insurancesonuser\" as \"a\" on \"genericuser\".\"id\" = \"a\".\"userid\""),
		qm.WhereIn("\"a\".\"insuranceid\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load genericuser")
	}

	var resultSlice []*Genericuser

	var localJoinCols []int
	for results.Next() {
		one := new(Genericuser)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Email, &one.Age, &one.Gender, &one.Passwordhash, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for genericuser")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice genericuser")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on genericuser")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for genericuser")
	}

	if len(genericuserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UseridGenericusers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &genericuserR{}
			}
			foreign.R.InsuranceidInsurances = append(foreign.R.InsuranceidInsurances, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UseridGenericusers = append(local.R.UseridGenericusers, foreign)
				if foreign.R == nil {
					foreign.R = &genericuserR{}
				}
				foreign.R.InsuranceidInsurances = append(foreign.R.InsuranceidInsurances, local)
				break
			}
		}
	}

	return nil
}

// AddUseridDoctors adds the given related objects to the existing relationships
// of the insurance, optionally inserting them as new records.
// Appends related to o.R.UseridDoctors.
// Sets related.R.InsuranceidInsurances appropriately.
func (o *Insurance) AddUseridDoctors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Doctor) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"insurancesondoctor\" (\"insuranceid\", \"userid\") values ($1, $2)"
		values := []interface{}{o.ID, rel.Userid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &insuranceR{
			UseridDoctors: related,
		}
	} else {
		o.R.UseridDoctors = append(o.R.UseridDoctors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &doctorR{
				InsuranceidInsurances: InsuranceSlice{o},
			}
		} else {
			rel.R.InsuranceidInsurances = append(rel.R.InsuranceidInsurances, o)
		}
	}
	return nil
}

// SetUseridDoctors removes all previously related items of the
// insurance replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InsuranceidInsurances's UseridDoctors accordingly.
// Replaces o.R.UseridDoctors with related.
// Sets related.R.InsuranceidInsurances's UseridDoctors accordingly.
func (o *Insurance) SetUseridDoctors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Doctor) error {
	query := "delete from \"insurancesondoctor\" where \"insuranceid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUseridDoctorsFromInsuranceidInsurancesSlice(o, related)
	if o.R != nil {
		o.R.UseridDoctors = nil
	}

	return o.AddUseridDoctors(ctx, exec, insert, related...)
}

// RemoveUseridDoctors relationships from objects passed in.
// Removes related items from R.UseridDoctors (uses pointer comparison, removal does not keep order)
// Sets related.R.InsuranceidInsurances.
func (o *Insurance) RemoveUseridDoctors(ctx context.Context, exec boil.ContextExecutor, related ...*Doctor) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"insurancesondoctor\" where \"insuranceid\" = $1 and \"userid\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.Userid)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUseridDoctorsFromInsuranceidInsurancesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UseridDoctors {
			if rel != ri {
				continue
			}

			ln := len(o.R.UseridDoctors)
			if ln > 1 && i < ln-1 {
				o.R.UseridDoctors[i] = o.R.UseridDoctors[ln-1]
			}
			o.R.UseridDoctors = o.R.UseridDoctors[:ln-1]
			break
		}
	}

	return nil
}

func removeUseridDoctorsFromInsuranceidInsurancesSlice(o *Insurance, related []*Doctor) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.InsuranceidInsurances {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.InsuranceidInsurances)
			if ln > 1 && i < ln-1 {
				rel.R.InsuranceidInsurances[i] = rel.R.InsuranceidInsurances[ln-1]
			}
			rel.R.InsuranceidInsurances = rel.R.InsuranceidInsurances[:ln-1]
			break
		}
	}
}

// AddUseridPatients adds the given related objects to the existing relationships
// of the insurance, optionally inserting them as new records.
// Appends related to o.R.UseridPatients.
// Sets related.R.InsuranceidInsurances appropriately.
func (o *Insurance) AddUseridPatients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Patient) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"insurancesonpatient\" (\"insuranceid\", \"userid\") values ($1, $2)"
		values := []interface{}{o.ID, rel.Userid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &insuranceR{
			UseridPatients: related,
		}
	} else {
		o.R.UseridPatients = append(o.R.UseridPatients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &patientR{
				InsuranceidInsurances: InsuranceSlice{o},
			}
		} else {
			rel.R.InsuranceidInsurances = append(rel.R.InsuranceidInsurances, o)
		}
	}
	return nil
}

// SetUseridPatients removes all previously related items of the
// insurance replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InsuranceidInsurances's UseridPatients accordingly.
// Replaces o.R.UseridPatients with related.
// Sets related.R.InsuranceidInsurances's UseridPatients accordingly.
func (o *Insurance) SetUseridPatients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Patient) error {
	query := "delete from \"insurancesonpatient\" where \"insuranceid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUseridPatientsFromInsuranceidInsurancesSlice(o, related)
	if o.R != nil {
		o.R.UseridPatients = nil
	}

	return o.AddUseridPatients(ctx, exec, insert, related...)
}

// RemoveUseridPatients relationships from objects passed in.
// Removes related items from R.UseridPatients (uses pointer comparison, removal does not keep order)
// Sets related.R.InsuranceidInsurances.
func (o *Insurance) RemoveUseridPatients(ctx context.Context, exec boil.ContextExecutor, related ...*Patient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"insurancesonpatient\" where \"insuranceid\" = $1 and \"userid\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.Userid)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUseridPatientsFromInsuranceidInsurancesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UseridPatients {
			if rel != ri {
				continue
			}

			ln := len(o.R.UseridPatients)
			if ln > 1 && i < ln-1 {
				o.R.UseridPatients[i] = o.R.UseridPatients[ln-1]
			}
			o.R.UseridPatients = o.R.UseridPatients[:ln-1]
			break
		}
	}

	return nil
}

func removeUseridPatientsFromInsuranceidInsurancesSlice(o *Insurance, related []*Patient) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.InsuranceidInsurances {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.InsuranceidInsurances)
			if ln > 1 && i < ln-1 {
				rel.R.InsuranceidInsurances[i] = rel.R.InsuranceidInsurances[ln-1]
			}
			rel.R.InsuranceidInsurances = rel.R.InsuranceidInsurances[:ln-1]
			break
		}
	}
}

// AddUseridGenericusers adds the given related objects to the existing relationships
// of the insurance, optionally inserting them as new records.
// Appends related to o.R.UseridGenericusers.
// Sets related.R.InsuranceidInsurances appropriately.
func (o *Insurance) AddUseridGenericusers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genericuser) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"insurancesonuser\" (\"insuranceid\", \"userid\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &insuranceR{
			UseridGenericusers: related,
		}
	} else {
		o.R.UseridGenericusers = append(o.R.UseridGenericusers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &genericuserR{
				InsuranceidInsurances: InsuranceSlice{o},
			}
		} else {
			rel.R.InsuranceidInsurances = append(rel.R.InsuranceidInsurances, o)
		}
	}
	return nil
}

// SetUseridGenericusers removes all previously related items of the
// insurance replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InsuranceidInsurances's UseridGenericusers accordingly.
// Replaces o.R.UseridGenericusers with related.
// Sets related.R.InsuranceidInsurances's UseridGenericusers accordingly.
func (o *Insurance) SetUseridGenericusers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genericuser) error {
	query := "delete from \"insurancesonuser\" where \"insuranceid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUseridGenericusersFromInsuranceidInsurancesSlice(o, related)
	if o.R != nil {
		o.R.UseridGenericusers = nil
	}

	return o.AddUseridGenericusers(ctx, exec, insert, related...)
}

// RemoveUseridGenericusers relationships from objects passed in.
// Removes related items from R.UseridGenericusers (uses pointer comparison, removal does not keep order)
// Sets related.R.InsuranceidInsurances.
func (o *Insurance) RemoveUseridGenericusers(ctx context.Context, exec boil.ContextExecutor, related ...*Genericuser) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"insurancesonuser\" where \"insuranceid\" = $1 and \"userid\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUseridGenericusersFromInsuranceidInsurancesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UseridGenericusers {
			if rel != ri {
				continue
			}

			ln := len(o.R.UseridGenericusers)
			if ln > 1 && i < ln-1 {
				o.R.UseridGenericusers[i] = o.R.UseridGenericusers[ln-1]
			}
			o.R.UseridGenericusers = o.R.UseridGenericusers[:ln-1]
			break
		}
	}

	return nil
}

func removeUseridGenericusersFromInsuranceidInsurancesSlice(o *Insurance, related []*Genericuser) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.InsuranceidInsurances {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.InsuranceidInsurances)
			if ln > 1 && i < ln-1 {
				rel.R.InsuranceidInsurances[i] = rel.R.InsuranceidInsurances[ln-1]
			}
			rel.R.InsuranceidInsurances = rel.R.InsuranceidInsurances[:ln-1]
			break
		}
	}
}

// Insurances retrieves all the records using an executor.
func Insurances(mods ...qm.QueryMod) insuranceQuery {
	mods = append(mods, qm.From("\"insurances\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"insurances\".*"})
	}

	return insuranceQuery{q}
}

// FindInsurance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInsurance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Insurance, error) {
	insuranceObj := &Insurance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"insurances\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, insuranceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from insurances")
	}

	if err = insuranceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return insuranceObj, err
	}

	return insuranceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Insurance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no insurances provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(insuranceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	insuranceInsertCacheMut.RLock()
	cache, cached := insuranceInsertCache[key]
	insuranceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			insuranceAllColumns,
			insuranceColumnsWithDefault,
			insuranceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(insuranceType, insuranceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(insuranceType, insuranceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"insurances\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"insurances\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into insurances")
	}

	if !cached {
		insuranceInsertCacheMut.Lock()
		insuranceInsertCache[key] = cache
		insuranceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Insurance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Insurance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	insuranceUpdateCacheMut.RLock()
	cache, cached := insuranceUpdateCache[key]
	insuranceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			insuranceAllColumns,
			insurancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update insurances, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"insurances\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, insurancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(insuranceType, insuranceMapping, append(wl, insurancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update insurances row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for insurances")
	}

	if !cached {
		insuranceUpdateCacheMut.Lock()
		insuranceUpdateCache[key] = cache
		insuranceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q insuranceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for insurances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for insurances")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InsuranceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), insurancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"insurances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, insurancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in insurance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all insurance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Insurance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no insurances provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(insuranceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	insuranceUpsertCacheMut.RLock()
	cache, cached := insuranceUpsertCache[key]
	insuranceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			insuranceAllColumns,
			insuranceColumnsWithDefault,
			insuranceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			insuranceAllColumns,
			insurancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert insurances, could not build update column list")
		}

		ret := strmangle.SetComplement(insuranceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(insurancePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert insurances, could not build conflict column list")
			}

			conflict = make([]string, len(insurancePrimaryKeyColumns))
			copy(conflict, insurancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"insurances\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(insuranceType, insuranceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(insuranceType, insuranceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert insurances")
	}

	if !cached {
		insuranceUpsertCacheMut.Lock()
		insuranceUpsertCache[key] = cache
		insuranceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Insurance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Insurance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Insurance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), insurancePrimaryKeyMapping)
	sql := "DELETE FROM \"insurances\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from insurances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for insurances")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q insuranceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no insuranceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from insurances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for insurances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InsuranceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(insuranceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), insurancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"insurances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, insurancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from insurance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for insurances")
	}

	if len(insuranceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Insurance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInsurance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InsuranceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InsuranceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), insurancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"insurances\".* FROM \"insurances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, insurancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InsuranceSlice")
	}

	*o = slice

	return nil
}

// InsuranceExists checks if the Insurance row exists.
func InsuranceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"insurances\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if insurances exists")
	}

	return exists, nil
}

// Exists checks if the Insurance row exists.
func (o *Insurance) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InsuranceExists(ctx, exec, o.ID)
}
