// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Doctors", testDoctors)
	t.Run("Genericusers", testGenericusers)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("Insurances", testInsurances)
	t.Run("Patients", testPatients)
	t.Run("Roles", testRoles)
	t.Run("Specialties", testSpecialties)
}

func TestDelete(t *testing.T) {
	t.Run("Doctors", testDoctorsDelete)
	t.Run("Genericusers", testGenericusersDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("Insurances", testInsurancesDelete)
	t.Run("Patients", testPatientsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Specialties", testSpecialtiesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Doctors", testDoctorsQueryDeleteAll)
	t.Run("Genericusers", testGenericusersQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("Insurances", testInsurancesQueryDeleteAll)
	t.Run("Patients", testPatientsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Specialties", testSpecialtiesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Doctors", testDoctorsSliceDeleteAll)
	t.Run("Genericusers", testGenericusersSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("Insurances", testInsurancesSliceDeleteAll)
	t.Run("Patients", testPatientsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Specialties", testSpecialtiesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Doctors", testDoctorsExists)
	t.Run("Genericusers", testGenericusersExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("Insurances", testInsurancesExists)
	t.Run("Patients", testPatientsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Specialties", testSpecialtiesExists)
}

func TestFind(t *testing.T) {
	t.Run("Doctors", testDoctorsFind)
	t.Run("Genericusers", testGenericusersFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("Insurances", testInsurancesFind)
	t.Run("Patients", testPatientsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Specialties", testSpecialtiesFind)
}

func TestBind(t *testing.T) {
	t.Run("Doctors", testDoctorsBind)
	t.Run("Genericusers", testGenericusersBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("Insurances", testInsurancesBind)
	t.Run("Patients", testPatientsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Specialties", testSpecialtiesBind)
}

func TestOne(t *testing.T) {
	t.Run("Doctors", testDoctorsOne)
	t.Run("Genericusers", testGenericusersOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("Insurances", testInsurancesOne)
	t.Run("Patients", testPatientsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Specialties", testSpecialtiesOne)
}

func TestAll(t *testing.T) {
	t.Run("Doctors", testDoctorsAll)
	t.Run("Genericusers", testGenericusersAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("Insurances", testInsurancesAll)
	t.Run("Patients", testPatientsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Specialties", testSpecialtiesAll)
}

func TestCount(t *testing.T) {
	t.Run("Doctors", testDoctorsCount)
	t.Run("Genericusers", testGenericusersCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("Insurances", testInsurancesCount)
	t.Run("Patients", testPatientsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Specialties", testSpecialtiesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Doctors", testDoctorsHooks)
	t.Run("Genericusers", testGenericusersHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("Insurances", testInsurancesHooks)
	t.Run("Patients", testPatientsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Specialties", testSpecialtiesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Doctors", testDoctorsInsert)
	t.Run("Doctors", testDoctorsInsertWhitelist)
	t.Run("Genericusers", testGenericusersInsert)
	t.Run("Genericusers", testGenericusersInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("Insurances", testInsurancesInsert)
	t.Run("Insurances", testInsurancesInsertWhitelist)
	t.Run("Patients", testPatientsInsert)
	t.Run("Patients", testPatientsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Specialties", testSpecialtiesInsert)
	t.Run("Specialties", testSpecialtiesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Doctors", testDoctorsReload)
	t.Run("Genericusers", testGenericusersReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("Insurances", testInsurancesReload)
	t.Run("Patients", testPatientsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Specialties", testSpecialtiesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Doctors", testDoctorsReloadAll)
	t.Run("Genericusers", testGenericusersReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("Insurances", testInsurancesReloadAll)
	t.Run("Patients", testPatientsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Specialties", testSpecialtiesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Doctors", testDoctorsSelect)
	t.Run("Genericusers", testGenericusersSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("Insurances", testInsurancesSelect)
	t.Run("Patients", testPatientsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Specialties", testSpecialtiesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Doctors", testDoctorsUpdate)
	t.Run("Genericusers", testGenericusersUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("Insurances", testInsurancesUpdate)
	t.Run("Patients", testPatientsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Specialties", testSpecialtiesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Doctors", testDoctorsSliceUpdateAll)
	t.Run("Genericusers", testGenericusersSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("Insurances", testInsurancesSliceUpdateAll)
	t.Run("Patients", testPatientsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Specialties", testSpecialtiesSliceUpdateAll)
}
