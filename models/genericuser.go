// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Genericuser is an object representing the database table.
type Genericuser struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email        string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Age          null.Int    `boil:"age" json:"age,omitempty" toml:"age" yaml:"age,omitempty"`
	Gender       null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	Passwordhash string      `boil:"passwordhash" json:"passwordhash" toml:"passwordhash" yaml:"passwordhash"`

	R *genericuserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L genericuserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GenericuserColumns = struct {
	ID           string
	Name         string
	Email        string
	Age          string
	Gender       string
	Passwordhash string
}{
	ID:           "id",
	Name:         "name",
	Email:        "email",
	Age:          "age",
	Gender:       "gender",
	Passwordhash: "passwordhash",
}

var GenericuserTableColumns = struct {
	ID           string
	Name         string
	Email        string
	Age          string
	Gender       string
	Passwordhash string
}{
	ID:           "genericuser.id",
	Name:         "genericuser.name",
	Email:        "genericuser.email",
	Age:          "genericuser.age",
	Gender:       "genericuser.gender",
	Passwordhash: "genericuser.passwordhash",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GenericuserWhere = struct {
	ID           whereHelperint
	Name         whereHelperstring
	Email        whereHelperstring
	Age          whereHelpernull_Int
	Gender       whereHelpernull_String
	Passwordhash whereHelperstring
}{
	ID:           whereHelperint{field: "\"genericuser\".\"id\""},
	Name:         whereHelperstring{field: "\"genericuser\".\"name\""},
	Email:        whereHelperstring{field: "\"genericuser\".\"email\""},
	Age:          whereHelpernull_Int{field: "\"genericuser\".\"age\""},
	Gender:       whereHelpernull_String{field: "\"genericuser\".\"gender\""},
	Passwordhash: whereHelperstring{field: "\"genericuser\".\"passwordhash\""},
}

// GenericuserRels is where relationship names are stored.
var GenericuserRels = struct {
	UseridDoctor          string
	UseridPatient         string
	InsuranceidInsurances string
	RoleidRoles           string
}{
	UseridDoctor:          "UseridDoctor",
	UseridPatient:         "UseridPatient",
	InsuranceidInsurances: "InsuranceidInsurances",
	RoleidRoles:           "RoleidRoles",
}

// genericuserR is where relationships are stored.
type genericuserR struct {
	UseridDoctor          *Doctor        `boil:"UseridDoctor" json:"UseridDoctor" toml:"UseridDoctor" yaml:"UseridDoctor"`
	UseridPatient         *Patient       `boil:"UseridPatient" json:"UseridPatient" toml:"UseridPatient" yaml:"UseridPatient"`
	InsuranceidInsurances InsuranceSlice `boil:"InsuranceidInsurances" json:"InsuranceidInsurances" toml:"InsuranceidInsurances" yaml:"InsuranceidInsurances"`
	RoleidRoles           RoleSlice      `boil:"RoleidRoles" json:"RoleidRoles" toml:"RoleidRoles" yaml:"RoleidRoles"`
}

// NewStruct creates a new relationship struct
func (*genericuserR) NewStruct() *genericuserR {
	return &genericuserR{}
}

func (r *genericuserR) GetUseridDoctor() *Doctor {
	if r == nil {
		return nil
	}
	return r.UseridDoctor
}

func (r *genericuserR) GetUseridPatient() *Patient {
	if r == nil {
		return nil
	}
	return r.UseridPatient
}

func (r *genericuserR) GetInsuranceidInsurances() InsuranceSlice {
	if r == nil {
		return nil
	}
	return r.InsuranceidInsurances
}

func (r *genericuserR) GetRoleidRoles() RoleSlice {
	if r == nil {
		return nil
	}
	return r.RoleidRoles
}

// genericuserL is where Load methods for each relationship are stored.
type genericuserL struct{}

var (
	genericuserAllColumns            = []string{"id", "name", "email", "age", "gender", "passwordhash"}
	genericuserColumnsWithoutDefault = []string{"name", "email", "passwordhash"}
	genericuserColumnsWithDefault    = []string{"id", "age", "gender"}
	genericuserPrimaryKeyColumns     = []string{"id"}
	genericuserGeneratedColumns      = []string{}
)

type (
	// GenericuserSlice is an alias for a slice of pointers to Genericuser.
	// This should almost always be used instead of []Genericuser.
	GenericuserSlice []*Genericuser
	// GenericuserHook is the signature for custom Genericuser hook methods
	GenericuserHook func(context.Context, boil.ContextExecutor, *Genericuser) error

	genericuserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	genericuserType                 = reflect.TypeOf(&Genericuser{})
	genericuserMapping              = queries.MakeStructMapping(genericuserType)
	genericuserPrimaryKeyMapping, _ = queries.BindMapping(genericuserType, genericuserMapping, genericuserPrimaryKeyColumns)
	genericuserInsertCacheMut       sync.RWMutex
	genericuserInsertCache          = make(map[string]insertCache)
	genericuserUpdateCacheMut       sync.RWMutex
	genericuserUpdateCache          = make(map[string]updateCache)
	genericuserUpsertCacheMut       sync.RWMutex
	genericuserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var genericuserAfterSelectMu sync.Mutex
var genericuserAfterSelectHooks []GenericuserHook

var genericuserBeforeInsertMu sync.Mutex
var genericuserBeforeInsertHooks []GenericuserHook
var genericuserAfterInsertMu sync.Mutex
var genericuserAfterInsertHooks []GenericuserHook

var genericuserBeforeUpdateMu sync.Mutex
var genericuserBeforeUpdateHooks []GenericuserHook
var genericuserAfterUpdateMu sync.Mutex
var genericuserAfterUpdateHooks []GenericuserHook

var genericuserBeforeDeleteMu sync.Mutex
var genericuserBeforeDeleteHooks []GenericuserHook
var genericuserAfterDeleteMu sync.Mutex
var genericuserAfterDeleteHooks []GenericuserHook

var genericuserBeforeUpsertMu sync.Mutex
var genericuserBeforeUpsertHooks []GenericuserHook
var genericuserAfterUpsertMu sync.Mutex
var genericuserAfterUpsertHooks []GenericuserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Genericuser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Genericuser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Genericuser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Genericuser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Genericuser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Genericuser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Genericuser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Genericuser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Genericuser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericuserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGenericuserHook registers your hook function for all future operations.
func AddGenericuserHook(hookPoint boil.HookPoint, genericuserHook GenericuserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		genericuserAfterSelectMu.Lock()
		genericuserAfterSelectHooks = append(genericuserAfterSelectHooks, genericuserHook)
		genericuserAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		genericuserBeforeInsertMu.Lock()
		genericuserBeforeInsertHooks = append(genericuserBeforeInsertHooks, genericuserHook)
		genericuserBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		genericuserAfterInsertMu.Lock()
		genericuserAfterInsertHooks = append(genericuserAfterInsertHooks, genericuserHook)
		genericuserAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		genericuserBeforeUpdateMu.Lock()
		genericuserBeforeUpdateHooks = append(genericuserBeforeUpdateHooks, genericuserHook)
		genericuserBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		genericuserAfterUpdateMu.Lock()
		genericuserAfterUpdateHooks = append(genericuserAfterUpdateHooks, genericuserHook)
		genericuserAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		genericuserBeforeDeleteMu.Lock()
		genericuserBeforeDeleteHooks = append(genericuserBeforeDeleteHooks, genericuserHook)
		genericuserBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		genericuserAfterDeleteMu.Lock()
		genericuserAfterDeleteHooks = append(genericuserAfterDeleteHooks, genericuserHook)
		genericuserAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		genericuserBeforeUpsertMu.Lock()
		genericuserBeforeUpsertHooks = append(genericuserBeforeUpsertHooks, genericuserHook)
		genericuserBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		genericuserAfterUpsertMu.Lock()
		genericuserAfterUpsertHooks = append(genericuserAfterUpsertHooks, genericuserHook)
		genericuserAfterUpsertMu.Unlock()
	}
}

// One returns a single genericuser record from the query.
func (q genericuserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Genericuser, error) {
	o := &Genericuser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for genericuser")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Genericuser records from the query.
func (q genericuserQuery) All(ctx context.Context, exec boil.ContextExecutor) (GenericuserSlice, error) {
	var o []*Genericuser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Genericuser slice")
	}

	if len(genericuserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Genericuser records in the query.
func (q genericuserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count genericuser rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q genericuserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if genericuser exists")
	}

	return count > 0, nil
}

// UseridDoctor pointed to by the foreign key.
func (o *Genericuser) UseridDoctor(mods ...qm.QueryMod) doctorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Doctors(queryMods...)
}

// UseridPatient pointed to by the foreign key.
func (o *Genericuser) UseridPatient(mods ...qm.QueryMod) patientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Patients(queryMods...)
}

// InsuranceidInsurances retrieves all the insurance's Insurances with an executor via id column.
func (o *Genericuser) InsuranceidInsurances(mods ...qm.QueryMod) insuranceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"insurancesonuser\" on \"insurances\".\"id\" = \"insurancesonuser\".\"insuranceid\""),
		qm.Where("\"insurancesonuser\".\"userid\"=?", o.ID),
	)

	return Insurances(queryMods...)
}

// RoleidRoles retrieves all the role's Roles with an executor via id column.
func (o *Genericuser) RoleidRoles(mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"rolesonuser\" on \"roles\".\"id\" = \"rolesonuser\".\"roleid\""),
		qm.Where("\"rolesonuser\".\"userid\"=?", o.ID),
	)

	return Roles(queryMods...)
}

// LoadUseridDoctor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (genericuserL) LoadUseridDoctor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenericuser interface{}, mods queries.Applicator) error {
	var slice []*Genericuser
	var object *Genericuser

	if singular {
		var ok bool
		object, ok = maybeGenericuser.(*Genericuser)
		if !ok {
			object = new(Genericuser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGenericuser))
			}
		}
	} else {
		s, ok := maybeGenericuser.(*[]*Genericuser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGenericuser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &genericuserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genericuserR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`doctor`),
		qm.WhereIn(`doctor.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Doctor")
	}

	var resultSlice []*Doctor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Doctor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for doctor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doctor")
	}

	if len(doctorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridDoctor = foreign
		if foreign.R == nil {
			foreign.R = &doctorR{}
		}
		foreign.R.UseridGenericuser = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Userid {
				local.R.UseridDoctor = foreign
				if foreign.R == nil {
					foreign.R = &doctorR{}
				}
				foreign.R.UseridGenericuser = local
				break
			}
		}
	}

	return nil
}

// LoadUseridPatient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (genericuserL) LoadUseridPatient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenericuser interface{}, mods queries.Applicator) error {
	var slice []*Genericuser
	var object *Genericuser

	if singular {
		var ok bool
		object, ok = maybeGenericuser.(*Genericuser)
		if !ok {
			object = new(Genericuser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGenericuser))
			}
		}
	} else {
		s, ok := maybeGenericuser.(*[]*Genericuser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGenericuser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &genericuserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genericuserR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`patient`),
		qm.WhereIn(`patient.userid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Patient")
	}

	var resultSlice []*Patient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Patient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for patient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for patient")
	}

	if len(patientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridPatient = foreign
		if foreign.R == nil {
			foreign.R = &patientR{}
		}
		foreign.R.UseridGenericuser = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Userid {
				local.R.UseridPatient = foreign
				if foreign.R == nil {
					foreign.R = &patientR{}
				}
				foreign.R.UseridGenericuser = local
				break
			}
		}
	}

	return nil
}

// LoadInsuranceidInsurances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (genericuserL) LoadInsuranceidInsurances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenericuser interface{}, mods queries.Applicator) error {
	var slice []*Genericuser
	var object *Genericuser

	if singular {
		var ok bool
		object, ok = maybeGenericuser.(*Genericuser)
		if !ok {
			object = new(Genericuser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGenericuser))
			}
		}
	} else {
		s, ok := maybeGenericuser.(*[]*Genericuser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGenericuser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &genericuserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genericuserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"insurances\".\"id\", \"insurances\".\"name\", \"a\".\"userid\""),
		qm.From("\"insurances\""),
		qm.InnerJoin("\"insurancesonuser\" as \"a\" on \"insurances\".\"id\" = \"a\".\"insuranceid\""),
		qm.WhereIn("\"a\".\"userid\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load insurances")
	}

	var resultSlice []*Insurance

	var localJoinCols []int
	for results.Next() {
		one := new(Insurance)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for insurances")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice insurances")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on insurances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for insurances")
	}

	if len(insuranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InsuranceidInsurances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &insuranceR{}
			}
			foreign.R.UseridGenericusers = append(foreign.R.UseridGenericusers, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.InsuranceidInsurances = append(local.R.InsuranceidInsurances, foreign)
				if foreign.R == nil {
					foreign.R = &insuranceR{}
				}
				foreign.R.UseridGenericusers = append(foreign.R.UseridGenericusers, local)
				break
			}
		}
	}

	return nil
}

// LoadRoleidRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (genericuserL) LoadRoleidRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenericuser interface{}, mods queries.Applicator) error {
	var slice []*Genericuser
	var object *Genericuser

	if singular {
		var ok bool
		object, ok = maybeGenericuser.(*Genericuser)
		if !ok {
			object = new(Genericuser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGenericuser))
			}
		}
	} else {
		s, ok := maybeGenericuser.(*[]*Genericuser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGenericuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGenericuser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &genericuserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genericuserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"roles\".\"id\", \"roles\".\"description\", \"a\".\"userid\""),
		qm.From("\"roles\""),
		qm.InnerJoin("\"rolesonuser\" as \"a\" on \"roles\".\"id\" = \"a\".\"roleid\""),
		qm.WhereIn("\"a\".\"userid\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load roles")
	}

	var resultSlice []*Role

	var localJoinCols []int
	for results.Next() {
		one := new(Role)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Description, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for roles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice roles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleidRoles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleR{}
			}
			foreign.R.UseridGenericusers = append(foreign.R.UseridGenericusers, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.RoleidRoles = append(local.R.RoleidRoles, foreign)
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.UseridGenericusers = append(foreign.R.UseridGenericusers, local)
				break
			}
		}
	}

	return nil
}

// SetUseridDoctor of the genericuser to the related item.
// Sets o.R.UseridDoctor to related.
// Adds o to related.R.UseridGenericuser.
func (o *Genericuser) SetUseridDoctor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Doctor) error {
	var err error

	if insert {
		related.Userid = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"doctor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
			strmangle.WhereClause("\"", "\"", 2, doctorPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Userid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Userid = o.ID
	}

	if o.R == nil {
		o.R = &genericuserR{
			UseridDoctor: related,
		}
	} else {
		o.R.UseridDoctor = related
	}

	if related.R == nil {
		related.R = &doctorR{
			UseridGenericuser: o,
		}
	} else {
		related.R.UseridGenericuser = o
	}
	return nil
}

// SetUseridPatient of the genericuser to the related item.
// Sets o.R.UseridPatient to related.
// Adds o to related.R.UseridGenericuser.
func (o *Genericuser) SetUseridPatient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Patient) error {
	var err error

	if insert {
		related.Userid = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"patient\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
			strmangle.WhereClause("\"", "\"", 2, patientPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Userid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Userid = o.ID
	}

	if o.R == nil {
		o.R = &genericuserR{
			UseridPatient: related,
		}
	} else {
		o.R.UseridPatient = related
	}

	if related.R == nil {
		related.R = &patientR{
			UseridGenericuser: o,
		}
	} else {
		related.R.UseridGenericuser = o
	}
	return nil
}

// AddInsuranceidInsurances adds the given related objects to the existing relationships
// of the genericuser, optionally inserting them as new records.
// Appends related to o.R.InsuranceidInsurances.
// Sets related.R.UseridGenericusers appropriately.
func (o *Genericuser) AddInsuranceidInsurances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Insurance) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"insurancesonuser\" (\"userid\", \"insuranceid\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &genericuserR{
			InsuranceidInsurances: related,
		}
	} else {
		o.R.InsuranceidInsurances = append(o.R.InsuranceidInsurances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &insuranceR{
				UseridGenericusers: GenericuserSlice{o},
			}
		} else {
			rel.R.UseridGenericusers = append(rel.R.UseridGenericusers, o)
		}
	}
	return nil
}

// SetInsuranceidInsurances removes all previously related items of the
// genericuser replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UseridGenericusers's InsuranceidInsurances accordingly.
// Replaces o.R.InsuranceidInsurances with related.
// Sets related.R.UseridGenericusers's InsuranceidInsurances accordingly.
func (o *Genericuser) SetInsuranceidInsurances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Insurance) error {
	query := "delete from \"insurancesonuser\" where \"userid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeInsuranceidInsurancesFromUseridGenericusersSlice(o, related)
	if o.R != nil {
		o.R.InsuranceidInsurances = nil
	}

	return o.AddInsuranceidInsurances(ctx, exec, insert, related...)
}

// RemoveInsuranceidInsurances relationships from objects passed in.
// Removes related items from R.InsuranceidInsurances (uses pointer comparison, removal does not keep order)
// Sets related.R.UseridGenericusers.
func (o *Genericuser) RemoveInsuranceidInsurances(ctx context.Context, exec boil.ContextExecutor, related ...*Insurance) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"insurancesonuser\" where \"userid\" = $1 and \"insuranceid\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeInsuranceidInsurancesFromUseridGenericusersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InsuranceidInsurances {
			if rel != ri {
				continue
			}

			ln := len(o.R.InsuranceidInsurances)
			if ln > 1 && i < ln-1 {
				o.R.InsuranceidInsurances[i] = o.R.InsuranceidInsurances[ln-1]
			}
			o.R.InsuranceidInsurances = o.R.InsuranceidInsurances[:ln-1]
			break
		}
	}

	return nil
}

func removeInsuranceidInsurancesFromUseridGenericusersSlice(o *Genericuser, related []*Insurance) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.UseridGenericusers {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.UseridGenericusers)
			if ln > 1 && i < ln-1 {
				rel.R.UseridGenericusers[i] = rel.R.UseridGenericusers[ln-1]
			}
			rel.R.UseridGenericusers = rel.R.UseridGenericusers[:ln-1]
			break
		}
	}
}

// AddRoleidRoles adds the given related objects to the existing relationships
// of the genericuser, optionally inserting them as new records.
// Appends related to o.R.RoleidRoles.
// Sets related.R.UseridGenericusers appropriately.
func (o *Genericuser) AddRoleidRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"rolesonuser\" (\"userid\", \"roleid\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &genericuserR{
			RoleidRoles: related,
		}
	} else {
		o.R.RoleidRoles = append(o.R.RoleidRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				UseridGenericusers: GenericuserSlice{o},
			}
		} else {
			rel.R.UseridGenericusers = append(rel.R.UseridGenericusers, o)
		}
	}
	return nil
}

// SetRoleidRoles removes all previously related items of the
// genericuser replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UseridGenericusers's RoleidRoles accordingly.
// Replaces o.R.RoleidRoles with related.
// Sets related.R.UseridGenericusers's RoleidRoles accordingly.
func (o *Genericuser) SetRoleidRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	query := "delete from \"rolesonuser\" where \"userid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRoleidRolesFromUseridGenericusersSlice(o, related)
	if o.R != nil {
		o.R.RoleidRoles = nil
	}

	return o.AddRoleidRoles(ctx, exec, insert, related...)
}

// RemoveRoleidRoles relationships from objects passed in.
// Removes related items from R.RoleidRoles (uses pointer comparison, removal does not keep order)
// Sets related.R.UseridGenericusers.
func (o *Genericuser) RemoveRoleidRoles(ctx context.Context, exec boil.ContextExecutor, related ...*Role) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"rolesonuser\" where \"userid\" = $1 and \"roleid\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRoleidRolesFromUseridGenericusersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleidRoles {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleidRoles)
			if ln > 1 && i < ln-1 {
				o.R.RoleidRoles[i] = o.R.RoleidRoles[ln-1]
			}
			o.R.RoleidRoles = o.R.RoleidRoles[:ln-1]
			break
		}
	}

	return nil
}

func removeRoleidRolesFromUseridGenericusersSlice(o *Genericuser, related []*Role) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.UseridGenericusers {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.UseridGenericusers)
			if ln > 1 && i < ln-1 {
				rel.R.UseridGenericusers[i] = rel.R.UseridGenericusers[ln-1]
			}
			rel.R.UseridGenericusers = rel.R.UseridGenericusers[:ln-1]
			break
		}
	}
}

// Genericusers retrieves all the records using an executor.
func Genericusers(mods ...qm.QueryMod) genericuserQuery {
	mods = append(mods, qm.From("\"genericuser\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"genericuser\".*"})
	}

	return genericuserQuery{q}
}

// FindGenericuser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGenericuser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Genericuser, error) {
	genericuserObj := &Genericuser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"genericuser\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, genericuserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from genericuser")
	}

	if err = genericuserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return genericuserObj, err
	}

	return genericuserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Genericuser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no genericuser provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genericuserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	genericuserInsertCacheMut.RLock()
	cache, cached := genericuserInsertCache[key]
	genericuserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			genericuserAllColumns,
			genericuserColumnsWithDefault,
			genericuserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(genericuserType, genericuserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(genericuserType, genericuserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"genericuser\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"genericuser\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into genericuser")
	}

	if !cached {
		genericuserInsertCacheMut.Lock()
		genericuserInsertCache[key] = cache
		genericuserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Genericuser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Genericuser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	genericuserUpdateCacheMut.RLock()
	cache, cached := genericuserUpdateCache[key]
	genericuserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			genericuserAllColumns,
			genericuserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update genericuser, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"genericuser\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, genericuserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(genericuserType, genericuserMapping, append(wl, genericuserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update genericuser row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for genericuser")
	}

	if !cached {
		genericuserUpdateCacheMut.Lock()
		genericuserUpdateCache[key] = cache
		genericuserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q genericuserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for genericuser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for genericuser")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GenericuserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genericuserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"genericuser\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, genericuserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in genericuser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all genericuser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Genericuser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no genericuser provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genericuserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	genericuserUpsertCacheMut.RLock()
	cache, cached := genericuserUpsertCache[key]
	genericuserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			genericuserAllColumns,
			genericuserColumnsWithDefault,
			genericuserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			genericuserAllColumns,
			genericuserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert genericuser, could not build update column list")
		}

		ret := strmangle.SetComplement(genericuserAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(genericuserPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert genericuser, could not build conflict column list")
			}

			conflict = make([]string, len(genericuserPrimaryKeyColumns))
			copy(conflict, genericuserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"genericuser\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(genericuserType, genericuserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(genericuserType, genericuserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert genericuser")
	}

	if !cached {
		genericuserUpsertCacheMut.Lock()
		genericuserUpsertCache[key] = cache
		genericuserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Genericuser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Genericuser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Genericuser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), genericuserPrimaryKeyMapping)
	sql := "DELETE FROM \"genericuser\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from genericuser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for genericuser")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q genericuserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no genericuserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genericuser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for genericuser")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GenericuserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(genericuserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genericuserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"genericuser\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genericuserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genericuser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for genericuser")
	}

	if len(genericuserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Genericuser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGenericuser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenericuserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GenericuserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genericuserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"genericuser\".* FROM \"genericuser\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genericuserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GenericuserSlice")
	}

	*o = slice

	return nil
}

// GenericuserExists checks if the Genericuser row exists.
func GenericuserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"genericuser\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if genericuser exists")
	}

	return exists, nil
}

// Exists checks if the Genericuser row exists.
func (o *Genericuser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GenericuserExists(ctx, exec, o.ID)
}
