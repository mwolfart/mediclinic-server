// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGenericusers(t *testing.T) {
	t.Parallel()

	query := Genericusers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGenericusersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGenericusersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Genericusers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGenericusersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GenericuserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGenericusersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GenericuserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Genericuser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GenericuserExists to return true, but got false.")
	}
}

func testGenericusersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	genericuserFound, err := FindGenericuser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if genericuserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGenericusersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Genericusers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGenericusersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Genericusers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGenericusersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	genericuserOne := &Genericuser{}
	genericuserTwo := &Genericuser{}
	if err = randomize.Struct(seed, genericuserOne, genericuserDBTypes, false, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}
	if err = randomize.Struct(seed, genericuserTwo, genericuserDBTypes, false, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = genericuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = genericuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Genericusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGenericusersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	genericuserOne := &Genericuser{}
	genericuserTwo := &Genericuser{}
	if err = randomize.Struct(seed, genericuserOne, genericuserDBTypes, false, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}
	if err = randomize.Struct(seed, genericuserTwo, genericuserDBTypes, false, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = genericuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = genericuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func genericuserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func genericuserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Genericuser) error {
	*o = Genericuser{}
	return nil
}

func testGenericusersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Genericuser{}
	o := &Genericuser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, genericuserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Genericuser object: %s", err)
	}

	AddGenericuserHook(boil.BeforeInsertHook, genericuserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	genericuserBeforeInsertHooks = []GenericuserHook{}

	AddGenericuserHook(boil.AfterInsertHook, genericuserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	genericuserAfterInsertHooks = []GenericuserHook{}

	AddGenericuserHook(boil.AfterSelectHook, genericuserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	genericuserAfterSelectHooks = []GenericuserHook{}

	AddGenericuserHook(boil.BeforeUpdateHook, genericuserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	genericuserBeforeUpdateHooks = []GenericuserHook{}

	AddGenericuserHook(boil.AfterUpdateHook, genericuserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	genericuserAfterUpdateHooks = []GenericuserHook{}

	AddGenericuserHook(boil.BeforeDeleteHook, genericuserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	genericuserBeforeDeleteHooks = []GenericuserHook{}

	AddGenericuserHook(boil.AfterDeleteHook, genericuserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	genericuserAfterDeleteHooks = []GenericuserHook{}

	AddGenericuserHook(boil.BeforeUpsertHook, genericuserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	genericuserBeforeUpsertHooks = []GenericuserHook{}

	AddGenericuserHook(boil.AfterUpsertHook, genericuserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	genericuserAfterUpsertHooks = []GenericuserHook{}
}

func testGenericusersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGenericusersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(genericuserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGenericuserOneToOneDoctorUsingUseridDoctor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Doctor
	var local Genericuser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.Userid = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UseridDoctor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Userid != foreign.Userid {
		t.Errorf("want: %v, got %v", foreign.Userid, check.Userid)
	}

	ranAfterSelectHook := false
	AddDoctorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GenericuserSlice{&local}
	if err = local.L.LoadUseridDoctor(ctx, tx, false, (*[]*Genericuser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridDoctor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UseridDoctor = nil
	if err = local.L.LoadUseridDoctor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridDoctor == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGenericuserOneToOnePatientUsingUseridPatient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Patient
	var local Genericuser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, patientDBTypes, true, patientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Patient struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.Userid = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UseridPatient().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Userid != foreign.Userid {
		t.Errorf("want: %v, got %v", foreign.Userid, check.Userid)
	}

	ranAfterSelectHook := false
	AddPatientHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Patient) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GenericuserSlice{&local}
	if err = local.L.LoadUseridPatient(ctx, tx, false, (*[]*Genericuser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridPatient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UseridPatient = nil
	if err = local.L.LoadUseridPatient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridPatient == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGenericuserOneToOneSetOpDoctorUsingUseridDoctor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c Doctor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, doctorDBTypes, false, strmangle.SetComplement(doctorPrimaryKeyColumns, doctorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Doctor{&b, &c} {
		err = a.SetUseridDoctor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UseridDoctor != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.UseridGenericuser != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Userid {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := DoctorExists(ctx, tx, x.Userid); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Userid {
			t.Error("foreign key was wrong value", a.ID, x.Userid)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testGenericuserOneToOneSetOpPatientUsingUseridPatient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c Patient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, patientDBTypes, false, strmangle.SetComplement(patientPrimaryKeyColumns, patientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, patientDBTypes, false, strmangle.SetComplement(patientPrimaryKeyColumns, patientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Patient{&b, &c} {
		err = a.SetUseridPatient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UseridPatient != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.UseridGenericuser != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Userid {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := PatientExists(ctx, tx, x.Userid); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Userid {
			t.Error("foreign key was wrong value", a.ID, x.Userid)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testGenericuserToManyInsuranceidInsurances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c Insurance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, insuranceDBTypes, false, insuranceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, insuranceDBTypes, false, insuranceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"insurancesonuser\" (\"userid\", \"insuranceid\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"insurancesonuser\" (\"userid\", \"insuranceid\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.InsuranceidInsurances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GenericuserSlice{&a}
	if err = a.L.LoadInsuranceidInsurances(ctx, tx, false, (*[]*Genericuser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InsuranceidInsurances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InsuranceidInsurances = nil
	if err = a.L.LoadInsuranceidInsurances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InsuranceidInsurances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGenericuserToManyRoleidRoles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"rolesonuser\" (\"userid\", \"roleid\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"rolesonuser\" (\"userid\", \"roleid\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.RoleidRoles().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GenericuserSlice{&a}
	if err = a.L.LoadRoleidRoles(ctx, tx, false, (*[]*Genericuser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleidRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleidRoles = nil
	if err = a.L.LoadRoleidRoles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleidRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGenericuserToManyAddOpInsuranceidInsurances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c, d, e Insurance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Insurance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Insurance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInsuranceidInsurances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.UseridGenericusers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.UseridGenericusers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.InsuranceidInsurances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InsuranceidInsurances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InsuranceidInsurances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGenericuserToManySetOpInsuranceidInsurances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c, d, e Insurance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Insurance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetInsuranceidInsurances(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InsuranceidInsurances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetInsuranceidInsurances(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InsuranceidInsurances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.UseridGenericusers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.UseridGenericusers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.InsuranceidInsurances[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.InsuranceidInsurances[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGenericuserToManyRemoveOpInsuranceidInsurances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c, d, e Insurance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Insurance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, insuranceDBTypes, false, strmangle.SetComplement(insurancePrimaryKeyColumns, insuranceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddInsuranceidInsurances(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InsuranceidInsurances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveInsuranceidInsurances(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InsuranceidInsurances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.UseridGenericusers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.UseridGenericusers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.InsuranceidInsurances) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.InsuranceidInsurances[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.InsuranceidInsurances[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGenericuserToManyAddOpRoleidRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c, d, e Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Role{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Role{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleidRoles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.UseridGenericusers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.UseridGenericusers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.RoleidRoles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleidRoles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleidRoles().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGenericuserToManySetOpRoleidRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c, d, e Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Role{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoleidRoles(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleidRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoleidRoles(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleidRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.UseridGenericusers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.UseridGenericusers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.RoleidRoles[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoleidRoles[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGenericuserToManyRemoveOpRoleidRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Genericuser
	var b, c, d, e Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, genericuserDBTypes, false, strmangle.SetComplement(genericuserPrimaryKeyColumns, genericuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Role{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoleidRoles(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoleidRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoleidRoles(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoleidRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.UseridGenericusers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.UseridGenericusers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.UseridGenericusers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.RoleidRoles) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoleidRoles[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoleidRoles[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGenericusersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGenericusersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GenericuserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGenericusersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Genericusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	genericuserDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Email`: `character varying`, `Age`: `integer`, `Gender`: `character varying`, `Passwordhash`: `character varying`}
	_                  = bytes.MinRead
)

func testGenericusersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(genericuserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(genericuserAllColumns) == len(genericuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGenericusersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(genericuserAllColumns) == len(genericuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Genericuser{}
	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, genericuserDBTypes, true, genericuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(genericuserAllColumns, genericuserPrimaryKeyColumns) {
		fields = genericuserAllColumns
	} else {
		fields = strmangle.SetComplement(
			genericuserAllColumns,
			genericuserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GenericuserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGenericusersUpsert(t *testing.T) {
	t.Parallel()

	if len(genericuserAllColumns) == len(genericuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Genericuser{}
	if err = randomize.Struct(seed, &o, genericuserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Genericuser: %s", err)
	}

	count, err := Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, genericuserDBTypes, false, genericuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Genericuser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Genericuser: %s", err)
	}

	count, err = Genericusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
